name: Release

on:
  push:
    tags:
      - 'v*'
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true    
jobs:
  prepare:
    name: Prepare (get version from tag)
    runs-on: ubuntu-latest
    steps:
    - id: GetBuildVersion
      run: |
        $ref = "${env:GITHUB_REF}"
        $version = $ref.Substring($ref.LastIndexOf("/") + 2)
        echo "version=${version}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append 
        echo "::set-output name=version::${version}"
      shell: pwsh
    outputs:
      version: ${{ steps.GetBuildVersion.outputs.version }}

  build-and-test:
    name: Build and Run Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Add Nuget Feed
      run:  dotnet nuget add source ${{ secrets.GITHUBNUGETURL }} -n github -u ${{ secrets.GITHUBUSER }} -p ${{ secrets.GITHUBREADPACKAGES }} --store-password-in-clear-text    
      shell: pwsh
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration Release

  code-analysis:
    name: Code Analysis
    needs: [build-and-test, prepare]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Add Nuget Feed
      run:  dotnet nuget add source ${{ secrets.GITHUBNUGETURL }} -n github -u ${{ secrets.GITHUBUSER }} -p ${{ secrets.GITHUBREADPACKAGES }} --store-password-in-clear-text    
      shell: pwsh 
    - name: Sonarqube Begin
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"TheWorkBookDev_TheWorkBook.Backend" /o:"theworkbookdev" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
    - name: Build
      run: dotnet build
    - name: Test with the dotnet CLI
      run: dotnet test
      env:
        ASPNETCORE_ENVIRONMENT: Development
    - name: Sonarqube end
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-nuget:
    name: Deploy nugets to GitHub Packages
    needs: [code-analysis, prepare]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Add Nuget Feed
      run:  dotnet nuget add source ${{ secrets.GITHUBNUGETURL }} -n github -u ${{ secrets.GITHUBUSER }} -p ${{ secrets.GITHUBREADPACKAGES }} --store-password-in-clear-text  
    - name: Set Version
      run: |
        version=`echo ${{needs.prepare.outputs.version}}`
        echo "version is $version"
        echo "version=$version" >> $GITHUB_ENV
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build -p:Version=$version --configuration Release --no-restore
    - name: Publish Nuget
      run: dotnet nuget push **/*.nupkg --api-key ${{ secrets.GITHUBWRITEPACKAGES }} --source ${{ secrets.GITHUBNUGETURL }}  

  deploy-production:
    name: Deploy to AWS Production
    needs: [deploy-nuget, prepare]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Add Nuget Feed
      run:  dotnet nuget add source ${{ secrets.GITHUBNUGETURL }} -n github -u ${{ secrets.GITHUBUSER }} -p ${{ secrets.GITHUBREADPACKAGES }} --store-password-in-clear-text
    - name: Set Version
      run: |
        version=`echo ${{needs.prepare.outputs.version}}`
        echo "version=$version" >> $GITHUB_ENV
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    - name: AWS CLI
      run: dotnet tool install -g Amazon.Lambda.Tools
    - name: Get build version
      run: |
        $ref = "${env:GITHUB_REF}"
        $version = $ref.Substring($ref.LastIndexOf("/") + 2)
        echo "version=${version}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append      
      shell: pwsh
    - name: Set version in CloudFormation
      working-directory: ./src/TheWorkBook.Backend.API
      run: find *.template -type f -exec sed -i ''s/#{ReleaseVersion}#/v${{ env.version }}/g'' {} \;
    - name: Set version in aws-lambda-tools-defaults
      working-directory: ./src/TheWorkBook.Backend.API
      run: find aws-lambda-tools-defaults.json -type f -exec sed -i ''s/#{ReleaseVersion}#/${{ env.version }}/g'' {} \;  
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Deploy to Lambda
      working-directory: ./src/TheWorkBook.Backend.API
      run: dotnet lambda deploy-serverless
